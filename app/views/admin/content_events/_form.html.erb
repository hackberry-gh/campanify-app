
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
var map,marker;
var geocoder = new google.maps.Geocoder();
var eventsAdded = false;

function geocodePosition(pos) {
  geocoder.geocode({
    latLng: pos
  }, function(responses) {
    if (responses && responses.length > 0) {
      updateMarkerAddress(responses[0].address_components);
    } else {
      updateMarkerAddress('Cannot determine address at this location.');
    }
  });
}

function updateMarkerStatus(str) {
  // document.getElementById('markerStatus').innerHTML = str;
}

function updateMarkerPosition(latLng) {
	$("#content_event_venue_latitude").val(latLng.lat());
	$("#content_event_venue_longitude").val(latLng.lng());	
}

function updateMarkerAddress(address_components) {
	for( i in address_components){
		var component = address_components[i];
		var type = component.types!==undefined ? component.types[0] : null;
		switch(type){
			case "country":
			$("#content_event_venue_country").val(component.long_name);
			break;
			case "administrative_area_level_1":
			$("#content_event_venue_state").val(component.long_name);			
			break;
			case "locality":
			$("#content_event_venue_city").val(component.long_name);
			break;
			case "postal_code":
			$("#content_event_venue_zip").val(component.long_name);			
			break;
			case "route":
			$("#content_event_venue_street").val(component.long_name);			
			break;						
		}
	}
  // document.getElementById('address').innerHTML = str;
}

function centerMap(latLng){
	marker = new google.maps.Marker({
    position: latLng,
    title: 'Venue',
    map: map,
    draggable: true
  });
	
	map.setCenter(latLng);
	
	// Update current position info.
  updateMarkerPosition(latLng);
  geocodePosition(latLng);
  
	if (!eventsAdded) {
	  // Add dragging event listeners.
	  google.maps.event.addListener(marker, 'dragstart', function() {
	    updateMarkerAddress('Dragging...');
	  });
  
	  google.maps.event.addListener(marker, 'drag', function() {
	    updateMarkerStatus('Dragging...');
	    updateMarkerPosition(marker.getPosition());
	  });
  
	  google.maps.event.addListener(marker, 'dragend', function() {
	    updateMarkerStatus('Drag ended');
	    geocodePosition(marker.getPosition());
	  });

		eventsAdded = true;
	}
}

function handleNoGeolocation(errorFlag, latLng) {
	if (errorFlag) {
		var content = 'Error: The Geolocation service failed.';
	} else {
		var content = 'Error: Your browser doesn\'t support geolocation.';
	}
	alert(content);
	centerMap(latLng);
}

function initialize() {

  var latLng = new google.maps.LatLng(41, 29);

  map = new google.maps.Map(document.getElementById('map_canvas'), {
    zoom: 8,
    center: latLng,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

	// Try HTML5 geolocation
	if(navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(function(position) {
			
			<% if @content_event.new_record? %>
			latLng = new google.maps.LatLng(position.coords.latitude,
				position.coords.longitude);
			<% else %>
			latLng = new google.maps.LatLng(<%= @content_event.venue[:latitude] %>,
				<%= @content_event.venue[:longitude] %>);
			<% end %>			

				centerMap(latLng);
				
			}, function() {
				handleNoGeolocation(true, latLng);
			});
		} else {
			// Browser doesn't support Geolocation
			handleNoGeolocation(false, latLng);
		}

}

// Onload handler to fire off the app.
google.maps.event.addDomListener(window, 'load', initialize);
</script>

<%= semantic_form_for [:admin, @content_event] do |f| %>
	
	<% unless @content_event.errors[:base].empty? %>
	<li>
	<label>Facebook Errors</label>	
	<% self.errors[:base].each do |e| %>
		<p><%=e%></p>
	<% end %>
	</li>
	<% end %>
	

	<%= f.globalize_inputs :translations do |lf| %>
		<%= lf.inputs :name, :description, :locale do %>
			<%= lf.input :name %>
			<%= lf.input :description, :as => :text %>

			<%= lf.input :locale, :as => :hidden %>
		<% end %>
	<% end %>
    
	
	<%= f.inputs do %>
	<%= f.input :start_time, :as => :datetime %>
	<%= f.input :end_time, :as => :datetime %>	
	<%= f.input :location %>	
	
	<%= f.input :venue, :as => :venue %>				
	
	<%= f.input :privacy, :as => :radio, :collection => ["OPEN","CLOSED","SECRET"] %>					

	<% 
	if current_administrator.meta["facebook"] && current_administrator.meta["facebook"]["accounts"]
	parent_options = {:as => :select, 
	:collection => current_administrator.meta["facebook"]["accounts"].map{|a|
	["#{a["name"]} - #{a["category"]}","#{a["id"]}-#{a["access_token"]}"]
	}}
	if !@content_event.new_record? && !@content_event.fb_id.nil?
		parent_options.merge!({:input_html => {:disabled => true},
		:hint => "Caution! Facebook event will be not updated"
		})
	else
		parent_options.merge!({:hint => "Select parent if you want to create event also on Facebook"})	
	end
	%>
	<%= f.input :parent, parent_options %>						
	<% else %>
	<li>
	<label>Parent</label>
	<strong>To creating facebook events, please link your account on <%=raw(link_to("link", edit_admin_administrator_path(current_administrator)))%></strong>
	</li>
	<% end %>
						
	<% end %>	
	
  <%= f.buttons %>

<% end %>
